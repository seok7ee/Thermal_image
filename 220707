# -*- coding: utf-8 -*-
"""
Created on Wed Jul  6 11:09:37 2022

@author: 2104792
"""

import cmd 
from http import client 
from pydoc import cli 
import socket 
import sys 
import struct 
from ctypes import * 
# from dataclasses import dataclass 
# from matplotlib import markers 
from numpy import size 
import numpy as np
import cv2 


class OZ_header_origin(Structure): 
    marker: str = 'oz00' 
    cmd : int = 6 
    size : int = 0 

class OZ_header(Structure): 
    _fields_ = [("marker", c_char), 
    ("cmd", c_int), 
    ("size", c_int),] 

pallet=(
        [0, 0, 0],
        [6, 0, 6],
        [13, 0, 13],
        [20, 0, 20],
        [27, 0, 27],
        [34, 0, 34],
        [41, 0, 41],
        [48, 0, 48],
        [55, 0, 55],
        [62, 0, 62],
        [69, 0, 69],
        [76, 0, 76],
        [83, 0, 83],
        [90, 0, 90],
        [97, 0, 97],
        [104, 0, 104],
        [111, 0, 111],
        [118, 0, 118],
        [125, 0, 125],
        [132, 0, 132],
        [139, 0, 139],
        [146, 0, 146],
        [153, 0, 153],
        [160, 0, 160],
        [167, 0, 167],
        [174, 0, 174],
        [181, 0, 181],
        [188, 0, 188],
        [195, 0, 195],
        [201, 0, 201],
        [209, 0, 209],
        [215, 0, 215],
        [223, 0, 223],
        [230, 0, 230],
        [236, 0, 236],
        [244, 0, 244],
        [250, 0, 250],
        [252, 0, 255],
        [245, 0, 254],
        [238, 0, 255],
        [231, 0, 255],
        [224, 0, 255],
        [217, 0, 255],
        [210, 0, 255],
        [203, 0, 255],
        [196, 0, 255],
        [189, 0, 255],
        [182, 0, 255],
        [175, 0, 255],
        [168, 0, 255],
        [161, 0, 255],
        [154, 0, 255],
        [147, 0, 254],
        [140, 0, 255],
        [133, 0, 255],
        [126, 0, 255],
        [119, 0, 255],
        [112, 0, 255],
        [105, 0, 255],
        [98, 0, 255],
        [91, 0, 255],
        [84, 0, 255],
        [77, 0, 255],
        [70, 0, 255],
        [63, 0, 255],
        [56, 0, 255],
        [49, 0, 255],
        [42, 0, 255],
        [35, 0, 255],
        [29, 0, 255],
        [21, 0, 255],
        [15, 0, 255],
        [8, 0, 255],
        [1, 0, 255],
        [0, 5, 255],
        [0, 12, 255],
        [0, 19, 255],
        [0, 26, 255],
        [0, 33, 255],
        [0, 40, 255],
        [0, 47, 255],
        [0, 54, 255],
        [0, 61, 255],
        [0, 68, 255],
        [0, 75, 254],
        [0, 82, 255],
        [0, 89, 255],
        [0, 96, 255],
        [0, 103, 255],
        [0, 110, 254],
        [0, 117, 255],
        [0, 124, 255],
        [0, 131, 255],
        [0, 138, 255],
        [0, 145, 255],
        [0, 152, 255],
        [0, 159, 255],
        [0, 166, 255],
        [0, 173, 255],
        [0, 180, 255],
        [0, 187, 255],
        [0, 194, 255],
        [0, 201, 255],
        [0, 208, 255],
        [0, 214, 255],
        [0, 222, 255],
        [0, 228, 255],
        [0, 235, 255],
        [0, 243, 255],
        [0, 249, 255],
        [0, 255, 253],
        [0, 255, 246],
        [0, 255, 239],
        [0, 255, 232],
        [0, 255, 225],
        [0, 255, 218],
        [0, 255, 211],
        [0, 255, 204],
        [0, 255, 197],
        [0, 255, 190],
        [0, 255, 183],
        [0, 254, 176],
        [0, 255, 169],
        [0, 255, 162],
        [0, 255, 155],
        [0, 255, 148],
        [0, 255, 141],
        [0, 255, 134],
        [0, 255, 127],
        [0, 255, 120],
        [0, 255, 113],
        [0, 255, 106],
        [0, 255, 99],
        [0, 255, 92],
        [0, 255, 85],
        [0, 255, 78],
        [0, 255, 71],
        [0, 255, 64],
        [0, 255, 57],
        [0, 255, 50],
        [0, 255, 43],
        [0, 255, 36],
        [0, 255, 30],
        [0, 255, 22],
        [0, 255, 16],
        [0, 255, 9],
        [0, 255, 2],
        [4, 255, 0],
        [11, 254, 0],
        [18, 255, 0],
        [25, 255, 0],
        [32, 255, 0],
        [39, 255, 0],
        [46, 254, 0],
        [53, 255, 0],
        [60, 255, 0],
        [67, 255, 0],
        [74, 255, 0],
        [81, 255, 0],
        [88, 255, 0],
        [95, 255, 0],
        [102, 255, 0],
        [109, 255, 0],
        [116, 255, 0],
        [123, 255, 0],
        [130, 255, 0],
        [137, 255, 0],
        [144, 255, 0],
        [151, 255, 0],
        [158, 255, 0],
        [165, 255, 0],
        [172, 255, 0],
        [179, 255, 0],
        [186, 255, 0],
        [193, 255, 0],
        [200, 255, 0],
        [207, 255, 0],
        [213, 255, 0],
        [221, 255, 0],
        [227, 255, 0],
        [234, 255, 0],
        [241, 255, 0],
        [248, 255, 0],
        [254, 254, 0],
        [255, 247, 0],
        [254, 240, 0],
        [255, 233, 0],
        [255, 226, 0],
        [255, 219, 0],
        [255, 212, 0],
        [254, 205, 0],
        [255, 198, 0],
        [255, 191, 0],
        [255, 184, 0],
        [255, 177, 0],
        [255, 170, 0],
        [255, 163, 0],
        [255, 156, 0],
        [255, 149, 0],
        [255, 142, 0],
        [255, 135, 0],
        [255, 128, 0],
        [255, 121, 0],
        [255, 114, 0],
        [255, 107, 0],
        [255, 100, 0],
        [255, 93, 0],
        [255, 86, 0],
        [255, 79, 0],
        [255, 72, 0],
        [255, 65, 0],
        [255, 58, 0],
        [255, 52, 0],
        [255, 44, 0],
        [255, 37, 0],
        [255, 31, 0],
        [255, 23, 0],
        [255, 17, 0],
        [255, 10, 0],
        [255, 3, 0],
        [254, 3, 3],
        [255, 10, 10],
        [254, 17, 17],
        [255, 24, 24],
        [255, 31, 31],
        [254, 38, 38],
        [255, 45, 45],
        [255, 52, 52],
        [255, 59, 59],
        [255, 66, 66],
        [255, 73, 73],
        [255, 80, 80],
        [255, 87, 87],
        [255, 94, 94],
        [255, 101, 101],
        [255, 108, 108],
        [255, 115, 115],
        [255, 122, 122],
        [255, 129, 129],
        [255, 136, 136],
        [255, 143, 143],
        [255, 150, 150],
        [255, 157, 157],
        [255, 164, 164],
        [255, 171, 171],
        [255, 178, 178],
        [255, 185, 185],
        [255, 192, 192],
        [255, 199, 199],
        [255, 206, 206],
        [255, 212, 212],
        [255, 220, 220],
        [255, 226, 226],
        [255, 233, 233],
        [255, 240, 240],
        [255, 247, 247])


############ Vision data ############# 
HOST='192.168.0.108' 
PORT=1030 #9090 TCP:1030 RSTP: 1056 

client_socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
client_socket.connect((HOST,PORT)) 

data=client_socket.recv(1024) 
info=struct.unpack('ccccii',data) 
print('Unpacked data[header] : ', info) 
print('info[5] : ',info[5]) 

data=client_socket.recv(info[5]) 
print('Unpacked data[data] : ', data) 
print('type : ', type(data)) 

############ Vision data transfer ############# 
PORT=554 #9090 TCP:1030 RSTP: 1056 
client_socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
client_socket.connect((HOST,PORT)) 
url='rtsp://admin1:1212@192.168.0.108:554/live4.sdp' #id:admin1 pw:1212 
print('Camera Connected!') 
cap=cv2.VideoCapture(url) 
#cv2.VideoCapture.isOpened() -> retval
print('Video Connected!') 

while True: 
    ret, frame =cap.read() 
    if not ret: # If there is no new frame, Break
        print('no frame')
        break
    # print("ret, frame : ",ret, frame)
    height, width, channels = frame.shape
    
    # file = open("Original.txt", "w") 
    # str = repr(frame)
    # file.write("frame = " + str + "\n")
    # file.close()
     
    print("height, width, channels :",height, width, channels)
    dark=frame[150,150,1]
    print('dark = ',dark)
    dark=np.array([[[dark, dark, dark]]], dtype=np.uint8)
    print('dark_array = ',dark)
    dark_yuv = cv2.cvtColor(dark, cv2.COLOR_BGR2YUV) #Y : luma(brightness)
    print('dark_yuv = ',dark_yuv)
    print('dark_y_value = ',dark_yuv[0][0][0])
    
    Dn_max=32249
    Dn_min=29396
    Dn_value=dark_yuv[0][0][0]
    print("Dn_value = ",Dn_value)
    Dn_image=(Dn_value/255)*(Dn_max-Dn_min)+Dn_min
    Image_temp=(Dn_image/100)-273
    
    Dn = 0 # initial value
    for i in range(0,height):
        for j in range(0,width):
            Dn_value=frame[i,j,1]
            Dn +=Dn_value
    Dn=Dn/(height*width)
            
    cv2.imshow('video', frame) 
    cv2.waitKey(1) 
    
cap.release()   
client_socket.close() 
