import cv2
import numpy as np
# import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.pyplot as plt
from PIL import Image
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

def colorFader(c1,c2,mix=0): #fade (linear interpolate) from color c1 (at mix=0) to c2 (mix=1)
    c1=np.array(mpl.colors.to_rgb(c1))
    c2=np.array(mpl.colors.to_rgb(c2))
    return mpl.colors.to_hex((1-mix)*c1 + mix*c2)

c1='#1f77b4' #blue
c2='green' #green
n=500
# plt.ylim([])

'''
fig, ax = plt.subplots(figsize=(8, 2))
for x in range(30,n+1):
    ax.axvline(x, color=colorFader(c1,c2,x/n), linewidth=4) 
'''
c3=np.array([0,0,0]) #white
c4=np.array([1,1,1]) #black

iteration=np.arange(0,50, 1/50)
fig, ax = plt.subplots(figsize=(8, 2))
plt.xlabel('Temp')
for x in iteration:
    ax.axvline(x, color=colorFader(c3,c4,x/50), linewidth=4) 

iteration=np.arange(0,50, 1/50)
fig, ax = plt.subplots(figsize=(2, 8))
#plt.axis('off')
plt.ylabel('Temp')
ax.set_xticks([])
for x in iteration:
    ax.axhline(x, color=colorFader(c3,c4,x/50), linewidth=4) 
# plt.axis([30, 50, 0, 1])
plt.savefig('foo.png')

img1=Image.open('foo.png').convert('RGB')
img1=img1.resize((100,480))
img1.show()
img1= np.asarray(img1)
#background = Image.new("RGB", img.size, (255, 255, 255))
#numpydata = np.asarray(img)

img2=cv2.imread('foo.png')
#img2_2=cv2. img2.resize((640,100))

#cv2.imshow(numpydata)
cap = cv2.VideoCapture(0)   # 0: default camera
#cap = cv2.VideoCapture("test.mp4") #동영상 파일에서 읽기
w = round(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
h = round(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS) # 카메라에 따라 값이 정상적, 비정상적

# fourcc 값 받아오기, *는 문자를 풀어쓰는 방식, *'DIVX' == 'D', 'I', 'V', 'X'
#fourcc = cv2.VideoWriter_fourcc(*'DIVX')
fourcc = cv2.VideoWriter_fourcc(*'XVID')
delay = round(1000/fps)
#out = cv2.VideoWriter('output.avi', fourcc, fps, (w, h))
out = cv2.VideoWriter('output.avi',fourcc, fps, (740,480)) # 합쳐진 화면 
while cap.isOpened():
    # 카메라 프레임 읽기
    success, frame = cap.read()

    if success:
        # 프레임 출력
        # edges = cv2.Canny(frame,100,200)
        grey = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)  
        grey_3_channel = cv2.cvtColor(grey, cv2.COLOR_GRAY2BGR)
        
        numpy_horizontal_concat = np.concatenate((grey_3_channel, img1), axis=1)
        cv2.imshow('Main',numpy_horizontal_concat)
        out.write(numpy_horizontal_concat)
        # plt.subplot(121),plt.imshow(frame,cmap = 'gray')
        # plt.title('Original Image'), plt.xticks([]), plt.yticks([])
        # plt.subplot(122),plt.imshow(edges,cmap = 'gray')
        # plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
        # plt.show()
        # ESC를 누르면 종료
        
        key = cv2.waitKey(1) & 0xFF      

        if (key == 27): 
            break
 
cap.release()
out.release()
cv2.destroyAllWindows()
